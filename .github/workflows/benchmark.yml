name: Performance Benchmark

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  benchmark:
    name: Single File Performance Benchmark
    runs-on: macos-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Swift 6.1
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.1"

      - name: Build package
        run: swift build

      - name: Run Single File Benchmark
        id: benchmark
        run: |
          echo "🚀 Running single file benchmark..."
          swift run fluidaudio benchmark --auto-download --single-file ES2004a --output benchmark_results.json | tee benchmark.log

          # Extract total time from CLI output
          if grep -q "Total benchmark execution time:" benchmark.log; then
            BENCHMARK_TIME=$(grep "Total benchmark execution time:" benchmark.log | grep -o '[0-9.]*')
            echo "BENCHMARK_TIME=${BENCHMARK_TIME}" >> $GITHUB_OUTPUT
          else
            echo "BENCHMARK_TIME=NA" >> $GITHUB_OUTPUT
          fi

          # Extract key metrics from JSON output
          if [ -f benchmark_results.json ]; then
            # Parse JSON results (using basic tools available in GitHub runners)
            AVERAGE_DER=$(cat benchmark_results.json | grep -o '"averageDER":[0-9]*\.?[0-9]*' | cut -d':' -f2)
            AVERAGE_JER=$(cat benchmark_results.json | grep -o '"averageJER":[0-9]*\.?[0-9]*' | cut -d':' -f2)
            PROCESSED_FILES=$(cat benchmark_results.json | grep -o '"processedFiles":[0-9]*' | cut -d':' -f2)

            # Get first result details
            RTF=$(cat benchmark_results.json | grep -o '"realTimeFactor":[0-9]*\.?[0-9]*' | head -1 | cut -d':' -f2)
            DURATION=$(cat benchmark_results.json | grep -o '"durationSeconds":[0-9]*\.?[0-9]*' | head -1 | cut -d':' -f2)
            SPEAKER_COUNT=$(cat benchmark_results.json | grep -o '"speakerCount":[0-9]*' | head -1 | cut -d':' -f2)

            echo "DER=${AVERAGE_DER}" >> $GITHUB_OUTPUT
            echo "JER=${AVERAGE_JER}" >> $GITHUB_OUTPUT
            echo "RTF=${RTF}" >> $GITHUB_OUTPUT
            echo "DURATION=${DURATION}" >> $GITHUB_OUTPUT
            echo "SPEAKER_COUNT=${SPEAKER_COUNT}" >> $GITHUB_OUTPUT
            echo "PROCESSED_FILES=${PROCESSED_FILES}" >> $GITHUB_OUTPUT
            echo "SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Benchmark failed - no results file generated"
            echo "SUCCESS=false" >> $GITHUB_OUTPUT
          fi
        timeout-minutes: 25

      - name: Show benchmark_results.json
        if: always()
        run: |
          echo "--- benchmark_results.json ---"
          cat benchmark_results.json || echo "benchmark_results.json not found"
          echo "-----------------------------"

      - name: Extract benchmark metrics with jq
        id: extract
        run: |
          DER=$(jq '.averageDER' benchmark_results.json)
          JER=$(jq '.averageJER' benchmark_results.json)
          RTF=$(jq '.results[0].realTimeFactor' benchmark_results.json)
          DURATION=$(jq '.results[0].durationSeconds' benchmark_results.json)
          SPEAKER_COUNT=$(jq '.results[0].speakerCount' benchmark_results.json)
          echo "DER=${DER}" >> $GITHUB_OUTPUT
          echo "JER=${JER}" >> $GITHUB_OUTPUT
          echo "RTF=${RTF}" >> $GITHUB_OUTPUT
          echo "DURATION=${DURATION}" >> $GITHUB_OUTPUT
          echo "SPEAKER_COUNT=${SPEAKER_COUNT}" >> $GITHUB_OUTPUT

      - name: Comment PR with Benchmark Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const der = parseFloat('${{ steps.extract.outputs.DER }}');
            const jer = parseFloat('${{ steps.extract.outputs.JER }}');
            const rtf = parseFloat('${{ steps.extract.outputs.RTF }}');
            const duration = parseFloat('${{ steps.extract.outputs.DURATION }}').toFixed(1);
            const speakerCount = '${{ steps.extract.outputs.SPEAKER_COUNT }}';
            const benchmarkTime = '${{ steps.benchmark.outputs.BENCHMARK_TIME }}';

            let comment = '## 🎯 Single File Benchmark Results\n\n';
            comment += `**Test File:** ES2004a (${duration}s audio)\n\n`;
            comment += '| Metric | Value | Target | Status |\n';
            comment += '|--------|-------|--------|---------|\n';
            comment += `| **DER** (Diarization Error Rate) | ${der.toFixed(1)}% | < 30% | ${der < 30 ? '✅' : '❌'} |\n`;
            comment += `| **JER** (Jaccard Error Rate) | ${jer.toFixed(1)}% | < 25% | ${jer < 25 ? '✅' : '❌'} |\n`;
            comment += `| **RTF** (Real-Time Factor) | ${rtf.toFixed(2)}x | < 1.0x | ${rtf < 1.0 ? '✅' : '❌'} |\n`;
            comment += `| **Speakers Detected** | ${speakerCount} | - | ℹ️ |\n`;
            comment += `| **Benchmark Runtime** | ${benchmarkTime}s | - | ℹ️ |\n\n`;

            // Performance assessment
            if (der < 20) {
              comment += '🎉 **Excellent Performance!** - Competitive with state-of-the-art research\n';
            } else if (der < 30) {
              comment += '✅ **Good Performance** - Meeting target benchmarks\n';
            } else {
              comment += '⚠️ **Performance Below Target** - Consider parameter optimization\n';
            }

            comment += '\n📊 **Research Comparison:**\n';
            comment += '- Powerset BCE (2023): 18.5% DER\n';
            comment += '- EEND (2019): 25.3% DER\n';
            comment += '- x-vector clustering: 28.7% DER\n';

            comment += '\n\n---\n*Automated benchmark using AMI corpus ES2004a test file*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
