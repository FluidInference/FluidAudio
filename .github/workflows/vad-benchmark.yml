name: VAD Benchmark

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  vad-benchmark:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.1"

      - name: Cache Swift packages
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-swift-6.1-${{ hashFiles('Package.swift') }}

      - name: Cache VAD models
        uses: actions/cache@v4
        with:
          path: ~/Library/Application Support/FluidAudio/vad
          key: ${{ runner.os }}-vad-models-v5

      - name: Build
        run: swift build -c release

      - name: Run VAD Benchmark
        id: benchmark
        run: |
          BENCHMARK_START=$(date +%s)

          swift run fluidaudio vad-benchmark \
            --dataset mini100 \
            --num-files 100 \
            --threshold 0.445

          BENCHMARK_END=$(date +%s)
          EXECUTION_TIME=$((BENCHMARK_END - BENCHMARK_START))
          echo "EXECUTION_TIME=$((EXECUTION_TIME / 60))m $((EXECUTION_TIME % 60))s" >> $GITHUB_OUTPUT

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vad-benchmark-${{ github.sha }}
          path: vad_benchmark_results.json
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let reportContent = '## VAD Benchmark Results\n\n';

            try {
              if (fs.existsSync('vad_benchmark_results.json')) {
                const results = JSON.parse(fs.readFileSync('vad_benchmark_results.json', 'utf8'));

                reportContent += `| Metric | Value | Target | Status |\n`;
                reportContent += `|--------|-------|--------|--------|\n`;
                reportContent += `| F1-Score | ${results.f1_score?.toFixed(1)}% | >70% | ${results.f1_score >= 70 ? '✅' : '❌'} |\n`;
                reportContent += `| Accuracy | ${results.accuracy?.toFixed(1)}% | >70% | ${results.accuracy >= 70 ? '✅' : '❌'} |\n\n`;

                reportContent += `<sub>${results.total_files} files • ${results.processing_time_seconds?.toFixed(1)}s • ${{ steps.benchmark.outputs.EXECUTION_TIME }}</sub>\n`;
              } else {
                reportContent += `❌ Benchmark failed - no results generated\n`;
              }

              reportContent += '<!-- fluidaudio-benchmark-vad -->';

              // Find and update existing comment
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const existingComment = comments.find(c =>
                c.body.includes('<!-- fluidaudio-benchmark-vad -->')
              );

              if (existingComment) {
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: reportContent
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: reportContent
                });
              }
            } catch (error) {
              console.error('Failed to post comment:', error);
            }

      - name: Validate performance
        run: |
          if [ -f "vad_benchmark_results.json" ]; then
            F1_SCORE=$(grep '"f1_score"' vad_benchmark_results.json | sed 's/.*: *\([0-9.]*\).*/\1/')
            if (( $(echo "$F1_SCORE < 70" | bc -l) )); then
              echo "❌ F1-Score $F1_SCORE% is below 70% threshold"
              exit 1
            fi
            echo "✅ F1-Score $F1_SCORE% meets threshold"
          else
            echo "❌ No results file found"
            exit 1
          fi
