name: Gemini PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to review"
        required: true
        type: number

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gemini-review:
    name: AI-Powered Code Review
    if: >
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       contains(github.event.comment.body, '/gemini review') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    timeout-minutes: 15

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get PR number
        id: get_pr
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Run Gemini PR Review
        uses: google-gemini/gemini-cli-action@main
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            You are an expert Swift developer and AI/ML engineer reviewing a pull request for FluidAudio, 
            a high-performance speaker diarization library for Apple platforms.

            Please provide a comprehensive code review focusing on:

            1. **Swift Best Practices**: Code style, naming conventions, proper use of optionals, error handling
            2. **Performance**: Optimize for Apple Silicon (M-series chips), memory management, async/await patterns
            3. **Audio Processing**: Speaker diarization algorithms, CoreML model handling, audio pipeline efficiency
            4. **Apple Platform Integration**: Proper use of Foundation, CoreML, AVFoundation, and platform-specific APIs
            5. **Testing & Benchmarking**: Test coverage, benchmark accuracy, AMI dataset validation
            6. **Documentation**: Code documentation, API clarity, performance characteristics

            Key Project Context:
            - Current benchmark: 17.7% DER (Diarization Error Rate) - competitive with research
            - Uses CoreML models for segmentation and speaker embedding
            - Optimized for real-time processing (RTF < 1.0x)
            - Supports automatic model download and recovery mechanisms
            - Targets macOS 13.0+ and iOS 16.0+

            Please be constructive and specific in your feedback. Highlight both strengths and areas for improvement.
            Focus on maintainability, performance, and adherence to Apple platform best practices.
          settings_json: |
            {
              "telemetry": {"enabled": false},
              "sandbox": false
            }
          version: "latest"

      - name: Add review summary comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.get_pr.outputs.PR_NUMBER }}';
            const triggerType = '${{ github.event_name }}';

            let comment = '## ðŸ¤– Gemini AI Code Review\n\n';

            if (triggerType === 'pull_request') {
              comment += 'âœ… **Automated Review**: This PR has been automatically reviewed by Gemini AI.\n\n';
            } else if (triggerType === 'issue_comment') {
              comment += 'âœ… **Manual Review**: Review triggered by comment request.\n\n';
            } else {
              comment += 'âœ… **Workflow Dispatch**: Review triggered manually.\n\n';
            }

            comment += 'ðŸŽ¯ **Focus Areas**: Swift best practices, performance optimization, audio processing, Apple platform integration\n\n';
            comment += 'ðŸ“Š **Project Context**: FluidAudio - Speaker diarization library (Current: 17.7% DER)\n\n';
            comment += '---\n\n';
            comment += '*The detailed review has been provided above by Gemini AI. For additional review, comment `/gemini review`.*';

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: Check for GEMINI.md updates
        id: check_gemini_updates
        run: |
          if git diff --quiet GEMINI.md; then
            echo "GEMINI_UPDATED=false" >> $GITHUB_OUTPUT
          else
            echo "GEMINI_UPDATED=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit GEMINI.md updates
        if: steps.check_gemini_updates.outputs.GEMINI_UPDATED == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add GEMINI.md
          git commit -m "ðŸ§  Update GEMINI.md with review insights
          
          - Added learnings from PR #${{ steps.get_pr.outputs.PR_NUMBER }} review
          - Updated knowledge base with new patterns/insights
          - Enhanced investigation framework based on findings
          
          ðŸ¤– Generated by Gemini AI Code Review"
          
      - name: Push GEMINI.md changes
        if: steps.check_gemini_updates.outputs.GEMINI_UPDATED == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
          
      - name: Comment on GEMINI.md updates
        if: steps.check_gemini_updates.outputs.GEMINI_UPDATED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.get_pr.outputs.PR_NUMBER }}';
            
            const comment = '## ðŸ§  GEMINI.md Knowledge Base Updated\n\n' +
              'âœ… **Learning Captured**: New insights from this PR review have been documented in GEMINI.md\n\n' +
              'ðŸ“š **Knowledge Evolution**: The AI review framework has been enhanced with:\n' +
              '- New patterns and anti-patterns discovered\n' +
              '- Performance insights and optimization techniques\n' +
              '- API design improvements and best practices\n' +
              '- Testing strategies and common issues\n\n' +
              'ðŸ”„ **Continuous Improvement**: These learnings will improve future PR reviews\n\n' +
              '---\n\n' +
              '*The GEMINI.md file serves as a living knowledge base that evolves with each review.*';
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
